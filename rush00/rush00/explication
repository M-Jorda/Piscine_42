print_first_or_last_line(int x, int is_first)
void print_first_or_last_line(int x, int is_first) : Déclaration de la fonction qui imprime la première ou la dernière ligne.
int i; : Déclaration de l'indice de boucle i.
if (x > 0) : Vérifie que x est supérieur à 0 pour imprimer la ligne.
if (is_first) ft_putchar('/'); else ft_putchar('\\'); : Imprime / si c'est la première ligne, sinon imprime \\.
for (i = 1; i < x - 1; i++) ft_putchar('*'); : Imprime * pour les caractères entre le premier et le dernier.
if (x > 1) { if (is_first) ft_putchar('\\'); else ft_putchar('/'); } : Imprime \\ ou / à la fin de la ligne si x est supérieur à 1.
ft_putchar('\n'); : Imprime un saut de ligne.
print_middle_line(int x)
void print_middle_line(int x) : Déclaration de la fonction qui imprime une ligne intermédiaire.
int i; : Déclaration de l'indice de boucle i.
if (x > 0) ft_putchar('*'); : Imprime * au début de la ligne si x est supérieur à 0.
for (i = 1; i < x - 1; i++) ft_putchar(' '); : Imprime des espaces pour les caractères entre le premier et le dernier.
if (x > 1) ft_putchar('*'); : Imprime * à la fin de la ligne si x est supérieur à 1.
ft_putchar('\n'); : Imprime un saut de ligne.
rush(int x, int y)
void rush(int x, int y) : Déclaration de la fonction principale rush.
int i; : Déclaration de l'indice de boucle i.
if (x <= 0 || y <= 0) return; : Vérifie que les dimensions sont positives, sinon retourne.
print_first_or_last_line(x, 1); : Imprime la première ligne.
for (i = 1; i < y - 1; i++) print_middle_line(x); : Imprime les lignes intermédiaires.
if (y > 1) print_first_or_last_line(x, 0); : Imprime la dernière ligne si y est supérieur à 1.
Avec cette implémentation, les différents cas testés devraient donner les résultats attendus.